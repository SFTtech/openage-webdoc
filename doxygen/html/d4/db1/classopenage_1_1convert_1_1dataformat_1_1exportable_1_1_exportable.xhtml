<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage.convert.dataformat.exportable.Exportable Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen_custom.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">v0.4.0</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="../../d9/d4e/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">openage.convert.dataformat.exportable.Exportable Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>superclass for all exportable data members  
 <a href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#details">More...</a></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="../../closed.png" alt="+"/> Inheritance diagram for openage.convert.dataformat.exportable.Exportable:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d3/d40/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="../../closed.png" alt="+"/> Collaboration diagram for openage.convert.dataformat.exportable.Exportable:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d3/df0/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable__coll__graph.svg" width="263" height="250"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aeb760b06a3e390df301bb2d04a61a5b3"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#aeb760b06a3e390df301bb2d04a61a5b3">__init__</a> (self, args)</td></tr>
<tr class="separator:aeb760b06a3e390df301bb2d04a61a5b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd30175646af16d47c9024685a16e3e3"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#abd30175646af16d47c9024685a16e3e3">dump</a> (self, filename)</td></tr>
<tr class="memdesc:abd30175646af16d47c9024685a16e3e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">main data dumping function, the magic happens in here.  <a href="#abd30175646af16d47c9024685a16e3e3">More...</a><br /></td></tr>
<tr class="separator:abd30175646af16d47c9024685a16e3e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadb76e27d69a7a94abc320498c316efe"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#aadb76e27d69a7a94abc320498c316efe">read</a> (self, raw, offset, cls=None, members=None)</td></tr>
<tr class="memdesc:aadb76e27d69a7a94abc320498c316efe"><td class="mdescLeft">&#160;</td><td class="mdescRight">recursively read defined binary data from raw at given offset.  <a href="#aadb76e27d69a7a94abc320498c316efe">More...</a><br /></td></tr>
<tr class="separator:aadb76e27d69a7a94abc320498c316efe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb235653b7107dc8194c16bd114210e6"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#abb235653b7107dc8194c16bd114210e6">structs</a> (cls)</td></tr>
<tr class="memdesc:abb235653b7107dc8194c16bd114210e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">create struct definitions for this class and its subdata references.  <a href="#abb235653b7107dc8194c16bd114210e6">More...</a><br /></td></tr>
<tr class="separator:abb235653b7107dc8194c16bd114210e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a552736ad870b3bc198363f257765da34"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#a552736ad870b3bc198363f257765da34">format_hash</a> (cls, hasher=None)</td></tr>
<tr class="memdesc:a552736ad870b3bc198363f257765da34"><td class="mdescLeft">&#160;</td><td class="mdescRight">provides a deterministic hash of all exported structure members  <a href="#a552736ad870b3bc198363f257765da34">More...</a><br /></td></tr>
<tr class="separator:a552736ad870b3bc198363f257765da34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae02ebc753e219e6084c6cdbf2a1fcdd2"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#ae02ebc753e219e6084c6cdbf2a1fcdd2">get_effective_type</a> (cls)</td></tr>
<tr class="separator:ae02ebc753e219e6084c6cdbf2a1fcdd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac173bb76cce6f538107168c61a427ab9"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#ac173bb76cce6f538107168c61a427ab9">get_data_format</a> (cls, allowed_modes=False, flatten_includes=False, is_parent=False)</td></tr>
<tr class="memdesc:ac173bb76cce6f538107168c61a427ab9"><td class="mdescLeft">&#160;</td><td class="mdescRight">return all members of this exportable (a struct.)  <a href="#ac173bb76cce6f538107168c61a427ab9">More...</a><br /></td></tr>
<tr class="separator:ac173bb76cce6f538107168c61a427ab9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a80169988e903e4a2344a7c963da419a3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#a80169988e903e4a2344a7c963da419a3">name_struct</a> = None</td></tr>
<tr class="separator:a80169988e903e4a2344a7c963da419a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7c6718c1514ed9bf32e7ac7110309d2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#aa7c6718c1514ed9bf32e7ac7110309d2">name_struct_file</a> = None</td></tr>
<tr class="separator:aa7c6718c1514ed9bf32e7ac7110309d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a500014c8262964c15fea0c5e59ed5cb3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#a500014c8262964c15fea0c5e59ed5cb3">struct_description</a> = None</td></tr>
<tr class="separator:a500014c8262964c15fea0c5e59ed5cb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeab3df1ddd1525a18b1383c69f4c4df6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#aeab3df1ddd1525a18b1383c69f4c4df6">game_versions</a> = list()</td></tr>
<tr class="separator:aeab3df1ddd1525a18b1383c69f4c4df6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8959e5aeedc57bfce4f9430708a35a3f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml#a8959e5aeedc57bfce4f9430708a35a3f">data_format</a> = list()</td></tr>
<tr class="separator:a8959e5aeedc57bfce4f9430708a35a3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>superclass for all exportable data members </p>
<p>exportable classes shall inherit from this. </p>

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00027">27</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aeb760b06a3e390df301bb2d04a61a5b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb760b06a3e390df301bb2d04a61a5b3">&#9670;&nbsp;</a></span>__init__()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def openage.convert.dataformat.exportable.Exportable.__init__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00044">44</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">def </span>__init__(self, **args):</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="comment"># store passed arguments as members</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        self.__dict__.update(args)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="abd30175646af16d47c9024685a16e3e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd30175646af16d47c9024685a16e3e3">&#9670;&nbsp;</a></span>dump()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def openage.convert.dataformat.exportable.Exportable.dump </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>main data dumping function, the magic happens in here. </p>
<p>recursively dumps all object members as DataDefinitions.</p>
<p>returns [DataDefinition, ..] </p>

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00055">55</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>

<p class="reference">References <a class="el" href="../../d0/dee/pyobject_8cpp_source.xhtml#l00352">openage::py.dict()</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00493">openage.convert.dataformat.exportable.Exportable.get_data_format()</a>, and <a class="el" href="../../d0/dee/pyobject_8cpp_source.xhtml#l00359">openage::py.list()</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../da/df6/texture_8py_source.xhtml#l00164">openage.convert.texture.Texture.save()</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="stringliteral">        ret = list()        # returned list of data definitions</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="stringliteral">        self_data = dict()  # data of the current object</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="stringliteral">        members = self.get_data_format(</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="stringliteral">            allowed_modes=(True, READ_EXPORT, NOREAD_EXPORT),</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="stringliteral">            flatten_includes=True)</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="stringliteral">        for _, _, member_name, member_type in members:</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="stringliteral">            # gather data members of the currently queried object</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="stringliteral">            self_data[member_name] = getattr(self, member_name)</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="stringliteral">            if isinstance(member_type, MultisubtypeMember):</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="stringliteral">                current_member_filename = filename + &quot;-&quot; + member_name</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="stringliteral">                if isinstance(member_type, SubdataMember):</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="stringliteral">                    is_single_subdata = True</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="stringliteral">                    subdata_item_iter = self_data[member_name]</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="stringliteral">                    # filename for the file containing the single subdata</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="stringliteral">                    # type entries:</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="stringliteral">                    submember_filename = current_member_filename</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="stringliteral">                else:</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="stringliteral">                    is_single_subdata = False</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="stringliteral">                    # TODO: bad design, move import to better place:</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="stringliteral">                    from .multisubtype_base import MultisubtypeBaseFile</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="stringliteral">                # file names for ref types</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="stringliteral">                multisubtype_ref_file_data = list()</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="stringliteral">                # subdata member DataDefitions</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="stringliteral">                subdata_definitions = list()</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="stringliteral">                for subtype_name, submember_class in member_type.class_lookup.items():</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="stringliteral">                    # if we are in a subdata member, this for loop will only</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="stringliteral">                    # run through once.</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="stringliteral">                    # else, do the actions for each subtype</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="stringliteral">                    if not is_single_subdata:</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="stringliteral">                        # iterate over the data for the current subtype</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="stringliteral">                        subdata_item_iter = self_data[member_name][subtype_name]</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="stringliteral">                        # filename for the file containing one of the</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="stringliteral">                        # subtype data entries:</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="stringliteral">                        submember_filename = &quot;%s/%s&quot; % (filename, subtype_name)</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="stringliteral">                    submember_data = list()</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="stringliteral">                    for idx, submember_data_item in enumerate(subdata_item_iter):</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="stringliteral">                        if not isinstance(submember_data_item, Exportable):</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="stringliteral">                            raise Exception(&quot;tried to dump object &quot;</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="stringliteral">                                            &quot;not inheriting from Exportable&quot;)</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="stringliteral">                        # generate output filename for next-level files</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="stringliteral">                        nextlevel_filename = &quot;%s/%04d&quot; % (submember_filename, idx)</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="stringliteral">                        # recursive call, fetches DataDefinitions and the</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="stringliteral">                        # next-level data dict</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="stringliteral">                        data_sets, data = submember_data_item.dump(nextlevel_filename)</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="stringliteral">                        # store recursively generated DataDefinitions to the</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="stringliteral">                        # flat list</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="stringliteral">                        ret += data_sets</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="stringliteral">                        # append the next-level entry to the list that will</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="stringliteral">                        # contain the data for the current level</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="stringliteral">                        # DataDefinition</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="stringliteral">                        if len(data.keys()) &gt; 0:</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="stringliteral">                            submember_data.append(data)</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="stringliteral">                    # always create a file, even with 0 entries.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="stringliteral">                    # create DataDefinition for the next-level data pile.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="stringliteral">                    subdata_definition = DataDefinition(</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="stringliteral">                        submember_class,</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="stringliteral">                        submember_data,</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="stringliteral">                        submember_filename,</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="stringliteral">                    )</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="stringliteral">                    if not is_single_subdata:</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="stringliteral">                        # create entry for type file index.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="stringliteral">                        # for each subtype, create entry in the subtype data</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="stringliteral">                        # file lookup file.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="stringliteral">                        # sync this with MultisubtypeBaseFile!</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="stringliteral">                        multisubtype_ref_file_data.append({</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="stringliteral">                            MultisubtypeBaseFile.data_format[0][1]: subtype_name,</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="stringliteral">                            MultisubtypeBaseFile.data_format[1][1]: &quot;%s%s&quot; % (</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="stringliteral">                                subdata_definition.name_data_file, GeneratedFile.output_preferences[&quot;csv&quot;][&quot;file_suffix&quot;]</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="stringliteral">                            ),</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="stringliteral">                        })</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="stringliteral">                    subdata_definitions.append(subdata_definition)</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="stringliteral">                # store filename instead of data list</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="stringliteral">                # is used to determine the file to read next.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="stringliteral">                # -&gt; multisubtype members: type file index</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="stringliteral">                # -&gt; subdata members:      filename of subdata</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="stringliteral">                self_data[member_name] = current_member_filename</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="stringliteral">                # for multisubtype members, append data definition for</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="stringliteral">                # storing references to all the subtype files</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="stringliteral">                if not is_single_subdata and len(multisubtype_ref_file_data) &gt; 0:</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="stringliteral">                    # this is the type file index.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="stringliteral">                    multisubtype_ref_file = DataDefinition(</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="stringliteral">                        MultisubtypeBaseFile,</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="stringliteral">                        multisubtype_ref_file_data,</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="stringliteral">                        self_data[member_name],  # create file to contain refs to subtype files</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="stringliteral">                    )</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="stringliteral">                    subdata_definitions.append(multisubtype_ref_file)</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="stringliteral">                # store all created submembers to the flat list</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="stringliteral">                ret += subdata_definitions</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="stringliteral">        # return flat list of DataDefinitions and dict of</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="stringliteral">        # {member_name: member_value, ...}</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="stringliteral">        return ret, self_data</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="stringliteral"></span></div><span class="stringliteral"></div><!-- fragment --><div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable_abd30175646af16d47c9024685a16e3e3_cgraph.svg" width="100%" height="416"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable_abd30175646af16d47c9024685a16e3e3_icgraph.svg" width="478" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a552736ad870b3bc198363f257765da34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a552736ad870b3bc198363f257765da34">&#9670;&nbsp;</a></span>format_hash()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def openage.convert.dataformat.exportable.Exportable.format_hash </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>cls</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>hasher</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>provides a deterministic hash of all exported structure members </p>
<p>used for determining changes in the exported data, which requires data reconversion. </p>

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00445">445</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>

<p class="reference">References <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00493">openage.convert.dataformat.exportable.Exportable.get_data_format()</a>, <a class="el" href="../../d6/d5c/colortable_8py_source.xhtml#l00014">openage.convert.colortable.ColorTable.name_struct</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00030">openage.convert.dataformat.exportable.Exportable.name_struct</a>, <a class="el" href="../../d0/d3f/blendomatic_8py_source.xhtml#l00202">openage.convert.blendomatic.Blendomatic.name_struct</a>, <a class="el" href="../../d6/d5c/colortable_8py_source.xhtml#l00015">openage.convert.colortable.ColorTable.name_struct_file</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00033">openage.convert.dataformat.exportable.Exportable.name_struct_file</a>, <a class="el" href="../../d0/d3f/blendomatic_8py_source.xhtml#l00203">openage.convert.blendomatic.Blendomatic.name_struct_file</a>, <a class="el" href="../../d6/d5c/colortable_8py_source.xhtml#l00016">openage.convert.colortable.ColorTable.struct_description</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00036">openage.convert.dataformat.exportable.Exportable.struct_description</a>, and <a class="el" href="../../d0/d3f/blendomatic_8py_source.xhtml#l00204">openage.convert.blendomatic.Blendomatic.struct_description</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../d6/d5d/empiresdat_8py_source.xhtml#l00344">openage.convert.gamedata.empiresdat.EmpiresDat.get_hash()</a>.</p>
<div class="fragment"><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="stringliteral">        if not hasher:</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="stringliteral">            hasher = hashlib.sha512()</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="stringliteral">        # struct properties</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="stringliteral">        hasher.update(cls.name_struct.encode())</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="stringliteral">        hasher.update(cls.name_struct_file.encode())</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="stringliteral">        hasher.update(cls.struct_description.encode())</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="stringliteral">        # only hash exported struct members!</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="stringliteral">        # non-exported values don&#39;t influence anything.</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="stringliteral">        members = cls.get_data_format(</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="stringliteral">            allowed_modes=(True, READ_EXPORT, NOREAD_EXPORT),</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="stringliteral">            flatten_includes=False,</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="stringliteral">        )</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="stringliteral">        for _, export, member_name, member_type in members:</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="stringliteral">            # includemembers etc have no name.</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="stringliteral">            if member_name:</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="stringliteral">                hasher.update(member_name.encode())</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="stringliteral">            if isinstance(member_type, DataMember):</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="stringliteral">                hasher = member_type.format_hash(hasher)</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="stringliteral">            elif isinstance(member_type, str):</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="stringliteral">                hasher.update(member_type.encode())</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="stringliteral">            else:</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="stringliteral">                raise Exception(&quot;can&#39;t hash unsupported member&quot;)</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="stringliteral">            hasher.update(export.name.encode())</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="stringliteral">        return hasher</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="stringliteral"></span></div><span class="stringliteral"></div><!-- fragment --><div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable_a552736ad870b3bc198363f257765da34_cgraph.svg" width="563" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable_a552736ad870b3bc198363f257765da34_icgraph.svg" width="562" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ac173bb76cce6f538107168c61a427ab9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac173bb76cce6f538107168c61a427ab9">&#9670;&nbsp;</a></span>get_data_format()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def openage.convert.dataformat.exportable.Exportable.get_data_format </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>cls</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>allowed_modes</em> = <code>False</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>flatten_includes</em> = <code>False</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>is_parent</em> = <code>False</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>return all members of this exportable (a struct.) </p>
<p>can filter by export modes and can also return included members: inherited members can either be returned as to-be-included, or can be fetched and displayed as if they weren't inherited. </p>

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00493">493</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>

<p class="reference">References <a class="el" href="../../d6/d5c/colortable_8py_source.xhtml#l00018">openage.convert.colortable.ColorTable.data_format</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00042">openage.convert.dataformat.exportable.Exportable.data_format</a>, and <a class="el" href="../../d0/d3f/blendomatic_8py_source.xhtml#l00207">openage.convert.blendomatic.Blendomatic.data_format</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00055">openage.convert.dataformat.exportable.Exportable.dump()</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00445">openage.convert.dataformat.exportable.Exportable.format_hash()</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00481">openage.convert.dataformat.exportable.Exportable.get_effective_type()</a>, and <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00402">openage.convert.dataformat.exportable.Exportable.structs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="stringliteral">        for member in cls.data_format:</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="stringliteral">            export, _, member_type = member</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="stringliteral">            definitively_return_member = False</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="stringliteral">            if isinstance(member_type, IncludeMembers):</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="stringliteral">                if flatten_includes:</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="stringliteral">                    # recursive call</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="stringliteral">                    yield from member_type.cls.get_data_format(</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="stringliteral">                        allowed_modes, flatten_includes, is_parent=True)</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="stringliteral">                    continue</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="stringliteral">            elif isinstance(member_type, ContinueReadMember):</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="stringliteral">                definitively_return_member = True</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="stringliteral">            if allowed_modes:</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="stringliteral">                if export not in allowed_modes:</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="stringliteral">                    if not definitively_return_member:</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="stringliteral">                        continue</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="stringliteral">            member_entry = (is_parent,) + member</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="stringliteral">            yield member_entry</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="stringliteral"></div><!-- fragment --><div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable_ac173bb76cce6f538107168c61a427ab9_icgraph.svg" width="100%" height="584"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ae02ebc753e219e6084c6cdbf2a1fcdd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae02ebc753e219e6084c6cdbf2a1fcdd2">&#9670;&nbsp;</a></span>get_effective_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def openage.convert.dataformat.exportable.Exportable.get_effective_type </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>cls</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00481">481</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>

<p class="reference">References <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00493">openage.convert.dataformat.exportable.Exportable.get_data_format()</a>, <a class="el" href="../../d6/d5c/colortable_8py_source.xhtml#l00014">openage.convert.colortable.ColorTable.name_struct</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00030">openage.convert.dataformat.exportable.Exportable.name_struct</a>, and <a class="el" href="../../d0/d3f/blendomatic_8py_source.xhtml#l00202">openage.convert.blendomatic.Blendomatic.name_struct</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../de/d1a/members_8py_source.xhtml#l00564">openage.convert.dataformat.members.CharArrayMember.__repr__()</a>, <a class="el" href="../../de/d1a/members_8py_source.xhtml#l00074">openage.convert.dataformat.members.DataMember.get_struct_entries()</a>, <a class="el" href="../../de/d1a/members_8py_source.xhtml#l00105">openage.convert.dataformat.members.GroupMember.get_typerefs()</a>, and <a class="el" href="../../de/d1a/members_8py_source.xhtml#l00429">openage.convert.dataformat.members.EnumMember.get_typerefs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="keyword">def </span>get_effective_type(cls):</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keywordflow">return</span> cls.name_struct</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div></div><!-- fragment --><div id="dynsection-7" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable_ae02ebc753e219e6084c6cdbf2a1fcdd2_cgraph.svg" width="563" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-8" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-8-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-8-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-8-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable_ae02ebc753e219e6084c6cdbf2a1fcdd2_icgraph.svg" width="558" height="248"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aadb76e27d69a7a94abc320498c316efe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aadb76e27d69a7a94abc320498c316efe">&#9670;&nbsp;</a></span>read()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def openage.convert.dataformat.exportable.Exportable.read </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>cls</em> = <code>None</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>members</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>recursively read defined binary data from raw at given offset. </p>
<p>this is used to fill the python classes with data from the binary input. </p>

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00180">180</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>

<p class="reference">References <a class="el" href="../../d8/dc8/strings_8py_source.xhtml#l00015">openage.util.strings.decode_until_null()</a>, <a class="el" href="../../d0/dee/pyobject_8cpp_source.xhtml#l00352">openage::py.dict()</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00039">openage.convert.dataformat.exportable.Exportable.game_versions</a>, <a class="el" href="../../d0/dee/pyobject_8cpp_source.xhtml#l00359">openage::py.list()</a>, <a class="el" href="../../de/d03/filelike_2native_8cpp_source.xhtml#l00055">openage::util::filelike::Native.read()</a>, <a class="el" href="../../da/de4/filelike_2python_8cpp_source.xhtml#l00017">openage::util::filelike::Python.read()</a>, <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00049">openage.codegen.codegen.WriteCatcher.read()</a>, <a class="el" href="../../d3/d8e/csv_8h_source.xhtml#l00059">openage::util::CSVCollection.read()</a>, <a class="el" href="../../d2/d93/lzxdstream_8py_source.xhtml#l00067">openage.cabextract.lzxdstream.LZXDStream.read()</a>, <a class="el" href="../../db/da6/classopenage_1_1util_1_1filelike_1_1_file_like.xhtml#adad657901714de4743f7d5a5ad8defdb">openage::util::filelike::FileLike.read()</a>, <a class="el" href="../../df/dd5/file_8cpp_source.xhtml#l00046">openage::util::File.read()</a>, <a class="el" href="../../d3/d8e/csv_8h_source.xhtml#l00157">openage::util::csv_subdata&lt; lineformat &gt;.read()</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00180">openage.convert.dataformat.exportable.Exportable.read()</a>, <a class="el" href="../../d9/d50/cab_8py_source.xhtml#l00541">openage.cabextract.cab.CABFolderStream.read()</a>, and <a class="el" href="../../da/df6/repr_8cpp_source.xhtml#l00012">openage::util.repr()</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00180">openage.convert.dataformat.exportable.Exportable.read()</a>, and <a class="el" href="../../db/d45/peresource_8py_source.xhtml#l00136">openage.convert.peresource.StringLiteral.readall()</a>.</p>
<div class="fragment"><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="stringliteral">        if cls:</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="stringliteral">            target_class = cls</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="stringliteral">        else:</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="stringliteral">            target_class = self</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="stringliteral">        # break out of the current reading loop when members don&#39;t exist in</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="stringliteral">        # source data file</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="stringliteral">        stop_reading_members = False</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="stringliteral">        if not members:</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="stringliteral">            members = target_class.get_data_format(</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="stringliteral">                allowed_modes=(True, READ_EXPORT, READ, READ_UNKNOWN),</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="stringliteral">                flatten_includes=False)</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="stringliteral">        for _, export, var_name, var_type in members:</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="stringliteral">            if stop_reading_members:</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="stringliteral">                if isinstance(var_type, DataMember):</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="stringliteral">                    replacement_value = var_type.get_empty_value()</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="stringliteral">                else:</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="stringliteral">                    replacement_value = 0</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="stringliteral">                setattr(self, var_name, replacement_value)</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="stringliteral">                continue</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="stringliteral">            if isinstance(var_type, GroupMember):</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="stringliteral">                if not issubclass(var_type.cls, Exportable):</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="stringliteral">                    raise Exception(&quot;class where members should be &quot;</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="stringliteral">                                    &quot;included is not exportable: %s&quot; % (</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="stringliteral">                                        var_type.cls.__name__))</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="stringliteral">                if isinstance(var_type, IncludeMembers):</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="stringliteral">                    # call the read function of the referenced class (cls),</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="stringliteral">                    # but store the data to the current object (self).</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="stringliteral">                    offset = var_type.cls.read(self, raw, offset,</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="stringliteral">                                               cls=var_type.cls)</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="stringliteral">                else:</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="stringliteral">                    # create new instance of referenced class (cls),</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="stringliteral">                    # use its read method to store data to itself,</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="stringliteral">                    # then save the result as a reference named `var_name`</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="stringliteral">                    # TODO: constructor argument passing may be required here.</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="stringliteral">                    grouped_data = var_type.cls(game_versions=self.game_versions)</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="stringliteral">                    offset = grouped_data.read(raw, offset)</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="stringliteral">                    setattr(self, var_name, grouped_data)</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="stringliteral">            elif isinstance(var_type, MultisubtypeMember):</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="stringliteral">                # subdata reference implies recursive call for reading the</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="stringliteral">                # binary data</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="stringliteral">                # arguments passed to the next-level constructor.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="stringliteral">                varargs = dict()</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="stringliteral">                if var_type.passed_args:</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="stringliteral">                    if isinstance(var_type.passed_args, str):</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="stringliteral">                        var_type.passed_args = set(var_type.passed_args)</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="stringliteral">                    for passed_member_name in var_type.passed_args:</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="stringliteral">                        varargs[passed_member_name] = getattr(self, passed_member_name)</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="stringliteral">                # subdata list length has to be defined beforehand as a</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="stringliteral">                # object member OR number.  it&#39;s name or count is specified</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="stringliteral">                # at the subdata member definition by length.</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="stringliteral">                list_len = var_type.get_length(self)</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="stringliteral">                # prepare result storage lists</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="stringliteral">                if isinstance(var_type, SubdataMember):</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="stringliteral">                    # single-subtype child data list</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="stringliteral">                    setattr(self, var_name, list())</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="stringliteral">                    single_type_subdata = True</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="stringliteral">                else:</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="stringliteral">                    # multi-subtype child data list</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="stringliteral">                    setattr(self, var_name, {key: [] for key in var_type.class_lookup})</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="stringliteral">                    single_type_subdata = False</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="stringliteral">                # check if entries need offset checking</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="stringliteral">                if var_type.offset_to:</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="stringliteral">                    offset_lookup = getattr(self, var_type.offset_to[0])</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="stringliteral">                else:</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="stringliteral">                    offset_lookup = None</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="stringliteral">                for i in range(list_len):</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="stringliteral">                    # if datfile offset == 0, entry has to be skipped.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="stringliteral">                    if offset_lookup:</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="stringliteral">                        if not var_type.offset_to[1](offset_lookup[i]):</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="stringliteral">                            continue</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="stringliteral">                        # TODO: don&#39;t read sequentially, use the lookup as</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="stringliteral">                        #       new offset?</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="stringliteral">                    if single_type_subdata:</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="stringliteral">                        # append single data entry to the subdata object list</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="stringliteral">                        new_data_class = var_type.class_lookup[None]</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="stringliteral">                    else:</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="stringliteral">                        # to determine the subtype class, read the binary</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="stringliteral">                        # definition. this utilizes an on-the-fly definition</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="stringliteral">                        # of the data to be read.</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="stringliteral">                        offset = self.read(</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="stringliteral">                            raw, offset, cls=target_class,</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="stringliteral">                            members=(((False,) + var_type.subtype_definition),)</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="stringliteral">                        )</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="stringliteral">                        # read the variable set by the above read call to</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="stringliteral">                        # use the read data to determine the denominaton of</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="stringliteral">                        # the member type</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="stringliteral">                        subtype_name = getattr(self, var_type.subtype_definition[1])</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="stringliteral">                        # look up the type name to get the subtype class</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="stringliteral">                        new_data_class = var_type.class_lookup[subtype_name]</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="stringliteral">                    if not issubclass(new_data_class, Exportable):</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="stringliteral">                        raise Exception(&quot;dumped data &quot;</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="stringliteral">                                        &quot;is not exportable: %s&quot; % (</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="stringliteral">                                            new_data_class.__name__))</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="stringliteral">                    # create instance of submember class</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="stringliteral">                    new_data = new_data_class(game_versions=self.game_versions, **varargs)</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="stringliteral">                    # recursive call, read the subdata.</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="stringliteral">                    offset = new_data.read(raw, offset, new_data_class)</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="stringliteral">                    # append the new data to the appropriate list</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="stringliteral">                    if single_type_subdata:</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="stringliteral">                        getattr(self, var_name).append(new_data)</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="stringliteral">                    else:</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="stringliteral">                        getattr(self, var_name)[subtype_name].append(new_data)</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="stringliteral">            else:</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="stringliteral">                # reading binary data, as this member is no reference but</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="stringliteral">                # actual content.</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="stringliteral">                data_count = 1</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="stringliteral">                is_custom_member = False</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="stringliteral">                if isinstance(var_type, str):</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="stringliteral">                    # TODO: generate and save member type on the fly</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="stringliteral">                    # instead of just reading</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="stringliteral">                    is_array = vararray_match.match(var_type)</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="stringliteral">                    if is_array:</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="stringliteral">                        struct_type = is_array.group(1)</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="stringliteral">                        data_count = is_array.group(2)</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="stringliteral">                        if struct_type == &quot;char&quot;:</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="stringliteral">                            struct_type = &quot;char[]&quot;</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="stringliteral">                        if integer_match.match(data_count):</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="stringliteral">                            # integer length</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="stringliteral">                            data_count = int(data_count)</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="stringliteral">                        else:</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="stringliteral">                            # dynamic length specified by member name</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="stringliteral">                            data_count = getattr(self, data_count)</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="stringliteral">                    else:</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="stringliteral">                        struct_type = var_type</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="stringliteral">                        data_count = 1</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="stringliteral">                elif isinstance(var_type, DataMember):</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="stringliteral">                    # special type requires having set the raw data type</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="stringliteral">                    struct_type = var_type.raw_type</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="stringliteral">                    data_count = var_type.get_length(self)</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="stringliteral">                    is_custom_member = True</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="stringliteral">                else:</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="stringliteral">                    raise Exception(&quot;unknown data member definition %s for member &#39;%s&#39;&quot; % (var_type, var_name))</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="stringliteral">                if data_count &lt; 0:</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="stringliteral">                    raise Exception(&quot;invalid length %d &lt; 0 in %s for member &#39;%s&#39;&quot; % (data_count, var_type, var_name))</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="stringliteral">                if struct_type not in struct_type_lookup:</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="stringliteral">                    raise Exception(&quot;%s: member %s requests unknown data type %s&quot; % (repr(self), var_name, struct_type))</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="stringliteral">                if export == READ_UNKNOWN:</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="stringliteral">                    # for unknown variables, generate uid for the unknown memory location</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="stringliteral">                    var_name = &quot;unknown-0x%08x&quot; % offset</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="stringliteral">                # lookup c type to python struct scan type</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="stringliteral">                symbol = struct_type_lookup[struct_type]</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="stringliteral">                # read that stuff!!11</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="stringliteral">                struct_format = &quot;&lt; %d%s&quot; % (data_count, symbol)</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="stringliteral">                result = struct.unpack_from(struct_format, raw, offset)</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="stringliteral">                if is_custom_member:</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="stringliteral">                    if not var_type.verify_read_data(self, result):</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="stringliteral">                        raise Exception(&quot;invalid data when reading %s &quot;</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="stringliteral">                                        &quot;at offset %# 08x&quot; % (</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="stringliteral">                                            var_name, offset))</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="stringliteral">                # TODO: move these into a read entry hook/verification method</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="stringliteral">                if symbol == &quot;s&quot;:</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="stringliteral">                    # stringify char array</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="stringliteral">                    result = decode_until_null(result[0])</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="stringliteral">                elif data_count == 1:</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="stringliteral">                    # store first tuple element</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="stringliteral">                    result = result[0]</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="stringliteral">                    if symbol == &quot;f&quot;:</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="stringliteral">                        if not math.isfinite(result):</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="stringliteral">                            raise Exception(&quot;invalid float when &quot;</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="stringliteral">                                            &quot;reading %s at offset %# 08x&quot; % (</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="stringliteral">                                                var_name, offset))</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="stringliteral">                # increase the current file position by the size we just read</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="stringliteral">                offset += struct.calcsize(struct_format)</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="stringliteral">                # run entry hook for non-primitive members</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="stringliteral">                if is_custom_member:</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="stringliteral">                    result = var_type.entry_hook(result)</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="stringliteral">                    if result == ContinueReadMember.Result.ABORT:</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="stringliteral">                        # don&#39;t go through all other members of this class!</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="stringliteral">                        stop_reading_members = True</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="stringliteral">                # store member&#39;s data value</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="stringliteral">                setattr(self, var_name, result)</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="stringliteral">        return offset</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="stringliteral"></span></div><span class="stringliteral"></div><!-- fragment --><div id="dynsection-9" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-9-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-9-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-9-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable_aadb76e27d69a7a94abc320498c316efe_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-10" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-10-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-10-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-10-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable_aadb76e27d69a7a94abc320498c316efe_icgraph.svg" width="502" height="76"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="abb235653b7107dc8194c16bd114210e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb235653b7107dc8194c16bd114210e6">&#9670;&nbsp;</a></span>structs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def openage.convert.dataformat.exportable.Exportable.structs </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>cls</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>create struct definitions for this class and its subdata references. </p>

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00402">402</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>

<p class="reference">References <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00493">openage.convert.dataformat.exportable.Exportable.get_data_format()</a>, and <a class="el" href="../../d0/dee/pyobject_8cpp_source.xhtml#l00359">openage::py.list()</a>.</p>
<div class="fragment"><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="stringliteral">        ret = list()</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="stringliteral">        self_member_count = 0</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="stringliteral">        # acquire all struct members, including the included members</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="stringliteral">        members = cls.get_data_format(</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="stringliteral">            allowed_modes=(True, READ_EXPORT, NOREAD_EXPORT),</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="stringliteral">            flatten_includes=False)</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="stringliteral">        for _, _, _, member_type in members:</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="stringliteral">            self_member_count += 1</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="stringliteral">            if isinstance(member_type, MultisubtypeMember):</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="stringliteral">                for _, subtype_class in sorted(member_type.class_lookup.items()):</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="stringliteral">                    if not issubclass(subtype_class, Exportable):</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="stringliteral">                        raise Exception(&quot;tried to export structs &quot;</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="stringliteral">                                        &quot;from non-exportable %s&quot; % (</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="stringliteral">                                            subtype_class))</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="stringliteral">                    ret += subtype_class.structs()</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="stringliteral">            elif isinstance(member_type, GroupMember):</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="stringliteral">                if not issubclass(member_type.cls, Exportable):</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="stringliteral">                    raise Exception(&quot;tried to export structs &quot;</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="stringliteral">                                    &quot;from non-exportable member &quot;</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="stringliteral">                                    &quot;included class %r&quot; % (member_type.cls))</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="stringliteral">                ret += member_type.cls.structs()</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="stringliteral">            else:</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="stringliteral">                continue</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="stringliteral">        # create struct only when it has members?</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="stringliteral">        if True or self_member_count &gt; 0:</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="stringliteral">            new_def = StructDefinition(cls)</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="stringliteral">            ret.append(new_def)</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="stringliteral">        return ret</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="stringliteral"></span></div><span class="stringliteral"></div><!-- fragment --><div id="dynsection-11" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-11-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-11-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-11-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable_abb235653b7107dc8194c16bd114210e6_cgraph.svg" width="100%" height="378"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a8959e5aeedc57bfce4f9430708a35a3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8959e5aeedc57bfce4f9430708a35a3f">&#9670;&nbsp;</a></span>data_format</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">openage.convert.dataformat.exportable.Exportable.data_format = list()</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00042">42</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00493">openage.convert.dataformat.exportable.Exportable.get_data_format()</a>.</p>

</div>
</div>
<a id="aeab3df1ddd1525a18b1383c69f4c4df6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeab3df1ddd1525a18b1383c69f4c4df6">&#9670;&nbsp;</a></span>game_versions</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">openage.convert.dataformat.exportable.Exportable.game_versions = list()</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00039">39</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00180">openage.convert.dataformat.exportable.Exportable.read()</a>.</p>

</div>
</div>
<a id="a80169988e903e4a2344a7c963da419a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80169988e903e4a2344a7c963da419a3">&#9670;&nbsp;</a></span>name_struct</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">openage.convert.dataformat.exportable.Exportable.name_struct = None</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00030">30</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../d1/dc6/data__definition_8py_source.xhtml#l00134">openage.convert.dataformat.data_definition.DataDefinition.__repr__()</a>, <a class="el" href="../../df/d8a/struct__definition_8py_source.xhtml#l00233">openage.convert.dataformat.struct_definition.StructDefinition.__repr__()</a>, <a class="el" href="../../df/d8a/struct__definition_8py_source.xhtml#l00224">openage.convert.dataformat.struct_definition.StructDefinition.__str__()</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00445">openage.convert.dataformat.exportable.Exportable.format_hash()</a>, <a class="el" href="../../d1/dc6/data__definition_8py_source.xhtml#l00035">openage.convert.dataformat.data_definition.DataDefinition.generate_csv()</a>, <a class="el" href="../../df/d8a/struct__definition_8py_source.xhtml#l00144">openage.convert.dataformat.struct_definition.StructDefinition.generate_struct()</a>, <a class="el" href="../../df/d8a/struct__definition_8py_source.xhtml#l00182">openage.convert.dataformat.struct_definition.StructDefinition.generate_struct_implementation()</a>, and <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00481">openage.convert.dataformat.exportable.Exportable.get_effective_type()</a>.</p>

</div>
</div>
<a id="aa7c6718c1514ed9bf32e7ac7110309d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7c6718c1514ed9bf32e7ac7110309d2">&#9670;&nbsp;</a></span>name_struct_file</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">openage.convert.dataformat.exportable.Exportable.name_struct_file = None</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00033">33</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../df/d8a/struct__definition_8py_source.xhtml#l00224">openage.convert.dataformat.struct_definition.StructDefinition.__str__()</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00445">openage.convert.dataformat.exportable.Exportable.format_hash()</a>, <a class="el" href="../../df/d8a/struct__definition_8py_source.xhtml#l00144">openage.convert.dataformat.struct_definition.StructDefinition.generate_struct()</a>, and <a class="el" href="../../df/d8a/struct__definition_8py_source.xhtml#l00182">openage.convert.dataformat.struct_definition.StructDefinition.generate_struct_implementation()</a>.</p>

</div>
</div>
<a id="a500014c8262964c15fea0c5e59ed5cb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a500014c8262964c15fea0c5e59ed5cb3">&#9670;&nbsp;</a></span>struct_description</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">openage.convert.dataformat.exportable.Exportable.struct_description = None</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00036">36</a> of file <a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../df/d8a/struct__definition_8py_source.xhtml#l00224">openage.convert.dataformat.struct_definition.StructDefinition.__str__()</a>, <a class="el" href="../../d9/d42/exportable_8py_source.xhtml#l00445">openage.convert.dataformat.exportable.Exportable.format_hash()</a>, <a class="el" href="../../d1/dc6/data__definition_8py_source.xhtml#l00035">openage.convert.dataformat.data_definition.DataDefinition.generate_csv()</a>, and <a class="el" href="../../df/d8a/struct__definition_8py_source.xhtml#l00144">openage.convert.dataformat.struct_definition.StructDefinition.generate_struct()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/mnt/c/Users/Jameson/Desktop/git/openage-new-doc-system/openage/convert/dataformat/<a class="el" href="../../d9/d42/exportable_8py_source.xhtml">exportable.py</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../da/d23/namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="../../d2/d78/namespaceopenage_1_1convert.xhtml">convert</a></li><li class="navelem"><a class="el" href="../../df/d58/namespaceopenage_1_1convert_1_1dataformat.xhtml">dataformat</a></li><li class="navelem"><a class="el" href="../../d7/dfc/namespaceopenage_1_1convert_1_1dataformat_1_1exportable.xhtml">exportable</a></li><li class="navelem"><a class="el" href="../../d4/db1/classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml">Exportable</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
