<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage.codegen.codegen Namespace Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen_custom.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">v0.4.0</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d3/df9/namespaceopenage_1_1codegen_1_1codegen.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">openage.codegen.codegen Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d7f/classopenage_1_1codegen_1_1codegen_1_1_codegen_dir_wrapper.xhtml">CodegenDirWrapper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Only allows pure-read and pure-write operations;.  <a href="../../db/d7f/classopenage_1_1codegen_1_1codegen_1_1_codegen_dir_wrapper.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/da7/classopenage_1_1codegen_1_1codegen_1_1_codegen_mode.xhtml">CodegenMode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modus operandi.  <a href="../../d3/da7/classopenage_1_1codegen_1_1codegen_1_1_codegen_mode.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d60/classopenage_1_1codegen_1_1codegen_1_1_write_catcher.xhtml">WriteCatcher</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ae7b44d30354970dff216b8f5d58fdd02"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen.xhtml#ae7b44d30354970dff216b8f5d58fdd02">codegen</a> (mode, input_dir, output_dir)</td></tr>
<tr class="separator:ae7b44d30354970dff216b8f5d58fdd02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3231dc85f25b4690179432502707a9c2"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen.xhtml#a3231dc85f25b4690179432502707a9c2">depend_module_blacklist</a> ()</td></tr>
<tr class="separator:a3231dc85f25b4690179432502707a9c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8de5b571a29191e7550c6acae3367da9"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen.xhtml#a8de5b571a29191e7550c6acae3367da9">get_codegen_depends</a> (outputwrapper)</td></tr>
<tr class="memdesc:a8de5b571a29191e7550c6acae3367da9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Yields all codegen dependencies.  <a href="#a8de5b571a29191e7550c6acae3367da9">More...</a><br /></td></tr>
<tr class="separator:a8de5b571a29191e7550c6acae3367da9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cce911eb4c73e57753d1a055e95549b"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen.xhtml#a7cce911eb4c73e57753d1a055e95549b">get_header_lines</a> ()</td></tr>
<tr class="memdesc:a7cce911eb4c73e57753d1a055e95549b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Yields the lines for the automatically-added file header.  <a href="#a7cce911eb4c73e57753d1a055e95549b">More...</a><br /></td></tr>
<tr class="separator:a7cce911eb4c73e57753d1a055e95549b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e6e694be0654b40e778b12ff2334b87"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen.xhtml#a1e6e694be0654b40e778b12ff2334b87">postprocess_write</a> (parts, data)</td></tr>
<tr class="memdesc:a1e6e694be0654b40e778b12ff2334b87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Post-processes a single write operation, as intercepted during codegen.  <a href="#a1e6e694be0654b40e778b12ff2334b87">More...</a><br /></td></tr>
<tr class="separator:a1e6e694be0654b40e778b12ff2334b87"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ae7b44d30354970dff216b8f5d58fdd02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7b44d30354970dff216b8f5d58fdd02">&#9670;&nbsp;</a></span>codegen()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def openage.codegen.codegen.codegen </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>input_dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>output_dir</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00116">116</a> of file <a class="el" href="../../dd/d12/codegen_8py_source.xhtml">codegen.py</a>.</p>

<p class="reference">References <a class="el" href="../../d7/d66/log_2____init_____8py_source.xhtml#l00122">openage::log.err()</a>, <a class="el" href="../../d0/d0f/listing_8py_source.xhtml#l00011">openage.codegen.listing.generate_all()</a>, <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00205">openage.codegen.codegen.get_codegen_depends()</a>, and <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00264">openage.codegen.codegen.postprocess_write()</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../d7/dbb/codegen_2main_8py_source.xhtml#l00108">openage.codegen.main.main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="stringliteral">    input_dir = Directory(input_dir).root</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="stringliteral">    output_dir = Directory(output_dir).root</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="stringliteral">    # this wrapper intercepts all writes and logs all reads.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="stringliteral">    wrapper = CodegenDirWrapper(input_dir)</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="stringliteral">    generate_all(wrapper.root)</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="stringliteral">    # set of all generated filenames</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="stringliteral">    generated = set()</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="stringliteral">    for parts, data in wrapper.get_writes():</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="stringliteral">        # TODO: this assumes output_dir is a fslike.Directory!</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="stringliteral">        generated.add(output_dir.fsobj.resolve(parts))</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="stringliteral">        # now, actually perform the generation.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="stringliteral">        # first, assemble the path for the current file</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="stringliteral">        wpath = output_dir[parts]</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="stringliteral">        try:</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="stringliteral">            data = postprocess_write(parts, data)</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="stringliteral">        except ValueError as exc:</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="stringliteral">            err(&quot;code generation issue with output file %s:\n%s&quot;,</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="stringliteral">                b&#39;/&#39;.join(parts).decode(errors=&#39;replace&#39;), exc.args[0])</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="stringliteral">            sys.exit(1)</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="stringliteral">        if mode == CodegenMode.codegen:</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="stringliteral">            # skip writing if the file already has that exact content</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="stringliteral">            try:</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="stringliteral">                with wpath.open(&#39;rb&#39;) as outfile:</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="stringliteral">                    if outfile.read() == data:</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="stringliteral">                        continue</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="stringliteral">            except FileNotFoundError:</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="stringliteral">                pass</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="stringliteral">            # write new content to file</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="stringliteral">            wpath.parent.mkdirs()</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="stringliteral">            with wpath.open(&#39;wb&#39;) as outfile:</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="stringliteral">                print(&quot;\x1b[36mcodegen: %s\x1b[0m&quot; % b&#39;/&#39;.join(parts).decode(errors=&#39;replace&#39;))</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="stringliteral">                outfile.write(data)</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="stringliteral">        elif mode == CodegenMode.dryrun:</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="stringliteral">            # no-op</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="stringliteral">            pass</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="stringliteral">        elif mode == CodegenMode.clean:</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="stringliteral">            if wpath.is_file():</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="stringliteral">                print(b&#39;/&#39;.join(parts).decode(errors=&#39;replace&#39;))</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="stringliteral">                wpath.unlink()</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="stringliteral">        else:</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="stringliteral">            err(&quot;unknown codegen mode: %s&quot;, mode)</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="stringliteral">            sys.exit(1)</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="stringliteral">    generated = {os.path.realpath(path).decode() for path in generated}</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="stringliteral">    depends = {os.path.realpath(path) for path in get_codegen_depends(wrapper)}</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="stringliteral">    return generated, depends</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="stringliteral">def depend_module_blacklist():</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    Yields all modules whose source files shall explicitly <span class="keywordflow">not</span> appear <span class="keywordflow">in</span> the</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    dependency list, even <span class="keywordflow">if</span> they have been imported.</div></div><!-- fragment --><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen_ae7b44d30354970dff216b8f5d58fdd02_cgraph.svg" width="100%" height="586"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen_ae7b44d30354970dff216b8f5d58fdd02_icgraph.svg" width="478" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a3231dc85f25b4690179432502707a9c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3231dc85f25b4690179432502707a9c2">&#9670;&nbsp;</a></span>depend_module_blacklist()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def openage.codegen.codegen.depend_module_blacklist </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00179">179</a> of file <a class="el" href="../../dd/d12/codegen_8py_source.xhtml">codegen.py</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00205">openage.codegen.codegen.get_codegen_depends()</a>.</p>
<div class="fragment"><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="stringliteral">    # openage.config is created only after the first run of cmake,</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="stringliteral">    # thus, the depends list will change at the second run of codegen,</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="stringliteral">    # re-triggering cmake.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="stringliteral">    try:</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="stringliteral">        import openage.config</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="stringliteral">        yield openage.config</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="stringliteral">    except ImportError:</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="stringliteral">        pass</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="stringliteral">    # devmode is imported by config, so the same reason as above applies.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="stringliteral">    try:</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="stringliteral">        import openage.devmode</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="stringliteral">        yield openage.devmode</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="stringliteral">    except ImportError:</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="stringliteral">        pass</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="stringliteral"></span></div><span class="stringliteral"></div><!-- fragment --><div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen_a3231dc85f25b4690179432502707a9c2_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a8de5b571a29191e7550c6acae3367da9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8de5b571a29191e7550c6acae3367da9">&#9670;&nbsp;</a></span>get_codegen_depends()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def openage.codegen.codegen.get_codegen_depends </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>outputwrapper</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Yields all codegen dependencies. </p>
<p>outputwrapper is the <a class="el" href="../../db/d7f/classopenage_1_1codegen_1_1codegen_1_1_codegen_dir_wrapper.xhtml" title="Only allows pure-read and pure-write operations;. ">CodegenDirWrapper</a> that was passed to generate_all; it's used to determine the files that have been read.</p>
<p>In addition, all imported python modules are yielded. </p>

<p class="definition">Definition at line <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00205">205</a> of file <a class="el" href="../../dd/d12/codegen_8py_source.xhtml">codegen.py</a>.</p>

<p class="reference">References <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00179">openage.codegen.codegen.depend_module_blacklist()</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00116">openage.codegen.codegen.codegen()</a>.</p>
<div class="fragment"><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="stringliteral">    # add all files that have been read as depends</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="stringliteral">    for parts in outputwrapper.get_reads():</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="stringliteral">        # TODO: this assumes that the wrap.obj.fsobj is a fslike.Directory</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="stringliteral">        # this just resolves paths to the output directory</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="stringliteral">        yield outputwrapper.obj.fsobj.resolve(parts).decode()</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="stringliteral">    module_blacklist = set(depend_module_blacklist())</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="stringliteral">    # add all source files that have been loaded as depends</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="stringliteral">    for module in modules.values():</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="stringliteral">        if module in module_blacklist:</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="stringliteral">            continue</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="stringliteral">        try:</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="stringliteral">            filename = module.__file__</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="stringliteral">        except AttributeError:</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="stringliteral">            # built-in modules don&#39;t have __file__, we don&#39;t want those as</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="stringliteral">            # depends.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="stringliteral">            continue</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="stringliteral">        if filename is None:</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="stringliteral">            # some modules have __file__ == None, we don&#39;t want those either.</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="stringliteral">            continue</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="stringliteral">        if module.__package__ == &#39;&#39;:</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="stringliteral">            continue</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="stringliteral">        if not filename.endswith(&#39;.py&#39;):</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="stringliteral">            # This usually means that some .so file is imported as module.</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="stringliteral">            # This is not a problem as long as it&#39;s not &quot;our&quot; .so file.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="stringliteral">            # =&gt; just handle non-openage non-.py files normally</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="stringliteral">            if &#39;openage&#39; in module.__name__:</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="stringliteral">                print(&quot;codegeneration depends on non-.py module &quot; + filename)</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="stringliteral">                sys.exit(1)</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="stringliteral">        yield filename</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="stringliteral"></span></div><span class="stringliteral"></div><!-- fragment --><div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen_a8de5b571a29191e7550c6acae3367da9_cgraph.svg" width="480" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen_a8de5b571a29191e7550c6acae3367da9_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a7cce911eb4c73e57753d1a055e95549b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cce911eb4c73e57753d1a055e95549b">&#9670;&nbsp;</a></span>get_header_lines()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def openage.codegen.codegen.get_header_lines </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Yields the lines for the automatically-added file header. </p>

<p class="definition">Definition at line <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00248">248</a> of file <a class="el" href="../../dd/d12/codegen_8py_source.xhtml">codegen.py</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00264">openage.codegen.codegen.postprocess_write()</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="stringliteral">    yield (</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="stringliteral">        &quot;Copyright 2013-{year} the openage authors. &quot;</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="stringliteral">        &quot;See copying.md for legal info.&quot;</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="stringliteral">    ).format(year=datetime.now().year)</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="stringliteral">    yield &quot;&quot;</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="stringliteral">    yield &quot;Warning: this file was auto-generated; manual changes are futile.&quot;</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="stringliteral">    yield &quot;For details, see buildsystem/codegen.cmake and openage/codegen.&quot;</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="stringliteral">    yield &quot;&quot;</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="stringliteral"></span></div><span class="stringliteral"></div><!-- fragment --><div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen_a7cce911eb4c73e57753d1a055e95549b_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a1e6e694be0654b40e778b12ff2334b87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e6e694be0654b40e778b12ff2334b87">&#9670;&nbsp;</a></span>postprocess_write()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def openage.codegen.codegen.postprocess_write </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>parts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Post-processes a single write operation, as intercepted during codegen. </p>

<p class="definition">Definition at line <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00264">264</a> of file <a class="el" href="../../dd/d12/codegen_8py_source.xhtml">codegen.py</a>.</p>

<p class="reference">References <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00248">openage.codegen.codegen.get_header_lines()</a>, and <a class="el" href="../../d9/d15/strings_8cpp_source.xhtml#l00136">openage::util.split()</a>.</p>

<p class="reference">Referenced by <a class="el" href="../../dd/d12/codegen_8py_source.xhtml#l00116">openage.codegen.codegen.codegen()</a>.</p>
<div class="fragment"><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="stringliteral">    # test whether filename starts with &#39;libopenage/&#39;</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="stringliteral">    if parts[0] != b&quot;libopenage&quot;:</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="stringliteral">        raise ValueError(&quot;Not in libopenage source directory&quot;)</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="stringliteral">    # test whether filename matches the pattern *.gen.*</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="stringliteral">    name, extension = os.path.splitext(parts[-1].decode())</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="stringliteral">    if not name.endswith(&#39;.gen&#39;):</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="stringliteral">        raise ValueError(&quot;Doesn&#39;t match required filename format .gen.SUFFIX&quot;)</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="stringliteral">    # check file extension, and use the appropriate comment prefix</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="stringliteral">    if extension in {&#39;.h&#39;, &#39;.cpp&#39;}:</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="stringliteral">        comment_prefix = &#39;//&#39;</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="stringliteral">    else:</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="stringliteral">        raise ValueError(&quot;Extension not in {.h, .cpp}&quot;)</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="stringliteral">    datalines = data.decode(&#39;ascii&#39;).split(&#39;\n&#39;)</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="stringliteral">    if &#39;Copyright&#39; in datalines[0]:</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="stringliteral">        datalines = datalines[1:]</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="stringliteral">    headerlines = []</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="stringliteral">    for line in get_header_lines():</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="stringliteral">        if line:</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="stringliteral">            headerlines.append(comment_prefix + &quot; &quot; + line)</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="stringliteral">        else:</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="stringliteral">            headerlines.append(&quot;&quot;)</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="stringliteral">    return &#39;\n&#39;.join(chain(headerlines, datalines)).encode(&#39;ascii&#39;)</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="stringliteral"></div><!-- fragment --><div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen_a1e6e694be0654b40e778b12ff2334b87_cgraph.svg" width="510" height="104"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-7" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen_a1e6e694be0654b40e778b12ff2334b87_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../da/d23/namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="../../d9/dd4/namespaceopenage_1_1codegen.xhtml">codegen</a></li><li class="navelem"><a class="el" href="../../d3/df9/namespaceopenage_1_1codegen_1_1codegen.xhtml">codegen</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
