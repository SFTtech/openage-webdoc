<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="d9/d38/text__to__event_8cpp" kind="file" language="C++">
    <compoundname>text_to_event.cpp</compoundname>
    <includes refid="da/dd8/text__to__event_8h" local="yes">text_to_event.h</includes>
    <includes local="no">regex</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">SDL2/SDL.h</includes>
    <includes refid="d7/dce/error_2error_8h" local="yes">../error/error.h</includes>
    <includes refid="d7/d7f/log_8h" local="yes">../log/log.h</includes>
    <includes refid="db/d56/testing_8h" local="yes">../testing/testing.h</includes>
    <incdepgraph>
      <node id="15992">
        <label>list</label>
      </node>
      <node id="15983">
        <label>atomic</label>
      </node>
      <node id="15998">
        <label>../testing/testing.h</label>
        <link refid="db/d56/testing_8h"/>
        <childnode refid="15971" relation="include">
        </childnode>
      </node>
      <node id="15997">
        <label>../log/log.h</label>
        <link refid="d7/d7f/log_8h"/>
        <childnode refid="15994" relation="include">
        </childnode>
        <childnode refid="15977" relation="include">
        </childnode>
      </node>
      <node id="15989">
        <label>iomanip</label>
      </node>
      <node id="15988">
        <label>functional</label>
      </node>
      <node id="15964">
        <label>event.h</label>
        <link refid="d9/d15/input_2event_8h"/>
        <childnode refid="15965" relation="include">
        </childnode>
        <childnode refid="15966" relation="include">
        </childnode>
        <childnode refid="15967" relation="include">
        </childnode>
        <childnode refid="15963" relation="include">
        </childnode>
        <childnode refid="15968" relation="include">
        </childnode>
      </node>
      <node id="15978">
        <label>cstdint</label>
      </node>
      <node id="15985">
        <label>externalsstream.h</label>
        <link refid="dc/dcf/externalsstream_8h"/>
        <childnode refid="15972" relation="include">
        </childnode>
        <childnode refid="15963" relation="include">
        </childnode>
      </node>
      <node id="15976">
        <label>signal.h</label>
        <link refid="d8/d39/signal_8h"/>
        <childnode refid="15976" relation="include">
        </childnode>
      </node>
      <node id="15970">
        <label>stdexcept</label>
      </node>
      <node id="15987">
        <label>cstdarg</label>
      </node>
      <node id="15963">
        <label>string</label>
      </node>
      <node id="15961">
        <label>/mnt/c/Users/Jameson/Desktop/git/openage-new-doc-system/libopenage/input/text_to_event.cpp</label>
        <link refid="d9/d38/text__to__event_8cpp"/>
        <childnode refid="15962" relation="include">
        </childnode>
        <childnode refid="15969" relation="include">
        </childnode>
        <childnode refid="15970" relation="include">
        </childnode>
        <childnode refid="15968" relation="include">
        </childnode>
        <childnode refid="15971" relation="include">
        </childnode>
        <childnode refid="15997" relation="include">
        </childnode>
        <childnode refid="15998" relation="include">
        </childnode>
      </node>
      <node id="15991">
        <label>logsink.h</label>
        <link refid="d3/d4e/logsink_8h"/>
        <childnode refid="15992" relation="include">
        </childnode>
        <childnode refid="15993" relation="include">
        </childnode>
        <childnode refid="15994" relation="include">
        </childnode>
      </node>
      <node id="15969">
        <label>regex</label>
      </node>
      <node id="15966">
        <label>unordered_set</label>
      </node>
      <node id="15977">
        <label>../log/message.h</label>
        <link refid="d2/d0d/message_8h"/>
        <childnode refid="15978" relation="include">
        </childnode>
        <childnode refid="15963" relation="include">
        </childnode>
        <childnode refid="15979" relation="include">
        </childnode>
        <childnode refid="15980" relation="include">
        </childnode>
        <childnode refid="15982" relation="include">
        </childnode>
        <childnode refid="15991" relation="include">
        </childnode>
        <childnode refid="15994" relation="include">
        </childnode>
      </node>
      <node id="15995">
        <label>../util/enum.h</label>
        <link refid="d0/d9b/enum_8h"/>
        <childnode refid="15972" relation="include">
        </childnode>
        <childnode refid="15996" relation="include">
        </childnode>
        <childnode refid="15974" relation="include">
        </childnode>
      </node>
      <node id="15968">
        <label>SDL2/SDL.h</label>
      </node>
      <node id="15996">
        <label>typeinfo</label>
      </node>
      <node id="15967">
        <label>vector</label>
      </node>
      <node id="15975">
        <label>ciso646</label>
      </node>
      <node id="15971">
        <label>../error/error.h</label>
        <link refid="d7/dce/error_2error_8h"/>
        <childnode refid="15972" relation="include">
        </childnode>
        <childnode refid="15973" relation="include">
        </childnode>
        <childnode refid="15970" relation="include">
        </childnode>
        <childnode refid="15963" relation="include">
        </childnode>
        <childnode refid="15974" relation="include">
        </childnode>
        <childnode refid="15977" relation="include">
        </childnode>
      </node>
      <node id="15990">
        <label>sstream</label>
      </node>
      <node id="15962">
        <label>text_to_event.h</label>
        <link refid="da/dd8/text__to__event_8h"/>
        <childnode refid="15963" relation="include">
        </childnode>
        <childnode refid="15964" relation="include">
        </childnode>
      </node>
      <node id="15974">
        <label>../util/compiler.h</label>
        <link refid="d4/dd1/compiler_8h"/>
        <childnode refid="15975" relation="include">
        </childnode>
        <childnode refid="15963" relation="include">
        </childnode>
        <childnode refid="15976" relation="include">
        </childnode>
      </node>
      <node id="15981">
        <label>cstdlib</label>
      </node>
      <node id="15994">
        <label>level.h</label>
        <link refid="de/d09/level_8h"/>
        <childnode refid="15995" relation="include">
        </childnode>
      </node>
      <node id="15972">
        <label>iostream</label>
      </node>
      <node id="15980">
        <label>../util/constexpr.h</label>
        <link refid="d1/d06/constexpr_8h"/>
        <childnode refid="15981" relation="include">
        </childnode>
      </node>
      <node id="15986">
        <label>strings.h</label>
        <link refid="d6/d90/strings_8h"/>
        <childnode refid="15987" relation="include">
        </childnode>
        <childnode refid="15988" relation="include">
        </childnode>
        <childnode refid="15989" relation="include">
        </childnode>
        <childnode refid="15973" relation="include">
        </childnode>
        <childnode refid="15990" relation="include">
        </childnode>
        <childnode refid="15963" relation="include">
        </childnode>
        <childnode refid="15967" relation="include">
        </childnode>
      </node>
      <node id="15965">
        <label>unordered_map</label>
      </node>
      <node id="15993">
        <label>mutex</label>
      </node>
      <node id="15982">
        <label>../util/stringformatter.h</label>
        <link refid="de/d65/stringformatter_8h"/>
        <childnode refid="15983" relation="include">
        </childnode>
        <childnode refid="15973" relation="include">
        </childnode>
        <childnode refid="15984" relation="include">
        </childnode>
        <childnode refid="15974" relation="include">
        </childnode>
        <childnode refid="15985" relation="include">
        </childnode>
        <childnode refid="15986" relation="include">
        </childnode>
      </node>
      <node id="15984">
        <label>type_traits</label>
      </node>
      <node id="15979">
        <label>config.h</label>
      </node>
      <node id="15973">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="da/d23/namespaceopenage">openage</innernamespace>
    <innernamespace refid="d5/dc6/namespaceopenage_1_1input">openage::input</innernamespace>
    <innernamespace refid="d9/def/namespaceopenage_1_1input_1_1tests">openage::input::tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2016-2017<sp/>the<sp/>openage<sp/>authors.<sp/>See<sp/>copying.md<sp/>for<sp/>legal<sp/>info.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="da/dd8/text__to__event_8h" kindref="compound">text_to_event.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL2/SDL.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../error/error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../log/log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../testing/testing.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="da/d23/namespaceopenage" kindref="compound">openage</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">input<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>modifiers{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>KMOD_LCTRL,<sp/>KMOD_LSHIFT,<sp/>KMOD_RCTRL,<sp/>KMOD_RSHIFT,<sp/>KMOD_LALT,<sp/>KMOD_RALT,<sp/>KMOD_LGUI,<sp/>KMOD_RGUI,<sp/>KMOD_CTRL,<sp/>KMOD_SHIFT,<sp/>KMOD_ALT,<sp/>KMOD_GUI,<sp/>KMOD_MODE,<sp/>KMOD_CAPS,<sp/>KMOD_NUM</highlight></codeline>
<codeline lineno="20"><highlight class="normal">};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::regex<sp/>event_pattern{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(?:(?:(LCtrl)|(LShift)|(RCtrl)|(RShift)|(LAlt)|(RAlt)|(LGui)|(RGUI)|(Ctrl)|(Shift)|(Alt)|(Gui)|(AltGr)|(Caps)|(NumLck))[[:space:]]+)?&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>modifier<sp/>(optional)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;([^[:space:]]+)&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(?:[[:space:]]+([^[:space:]]+))?&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>parameter,<sp/>like<sp/>direction<sp/>(optional)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[:space:]]*&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_modifiers_once()<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checked<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!checked)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checked<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dce/error_2error_8h_1ae20e8a0a86b80f8211fdf87477524f87" kindref="member">ENSURE</ref>(event_pattern.mark_count()<sp/>==<sp/>modifiers.size()<sp/>+<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Groups<sp/>in<sp/>the<sp/>input<sp/>event<sp/>regex<sp/>pattern:<sp/>one<sp/>per<sp/>key<sp/>modifier,<sp/>key<sp/>itself<sp/>and<sp/>amount.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">Event<sp/>to_event(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;event_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;param,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="de/d60/namespaceopenage_1_1util_1a7e483e123bf554b630319eb3dd012c02" kindref="member">mod</ref>)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MOUSE&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1abae2435eecb13af4c06e9449299ceb41" kindref="member">sdl_mouse</ref>(std::stoi(param),<sp/>static_cast&lt;SDL_Keymod&gt;(mod));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MOUSE_UP&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1ad3082ad89eabf77fdae7da9f72f26910" kindref="member">sdl_mouse_up_down</ref>(std::stoi(param),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>static_cast&lt;SDL_Keymod&gt;(mod));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MOUSE_DOWN&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1ad3082ad89eabf77fdae7da9f72f26910" kindref="member">sdl_mouse_up_down</ref>(std::stoi(param),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>static_cast&lt;SDL_Keymod&gt;(mod));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::logic_error&amp;)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Error(<ref refid="d2/d0d/message_8h_1a8adfad4f54eb306fbb8aaa1b159608a5" kindref="member">MSG</ref>(<ref refid="dd/d1a/namespaceopenage_1_1log_1ab6b4b10be67af93ab6c4d5a36139736e" kindref="member">err</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>parse<sp/>mouse<sp/>button<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>param<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;WHEEL&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>||<sp/>param<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;UP&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1ab6f0345d20c07a72034dc85a73d1cdf1" kindref="member">sdl_wheel</ref>(1,<sp/>static_cast&lt;SDL_Keymod&gt;(mod));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal"><sp/>||<sp/>param<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DOWN&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1ab6f0345d20c07a72034dc85a73d1cdf1" kindref="member">sdl_wheel</ref>(-1,<sp/>static_cast&lt;SDL_Keymod&gt;(mod));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Error(<ref refid="d2/d0d/message_8h_1a8adfad4f54eb306fbb8aaa1b159608a5" kindref="member">MSG</ref>(<ref refid="dd/d1a/namespaceopenage_1_1log_1ab6b4b10be67af93ab6c4d5a36139736e" kindref="member">err</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>parse<sp/>mouse<sp/>wheel<sp/>amount<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>param<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Keycode<sp/>key_code<sp/>=<sp/>SDL_GetKeyFromName(event_type.c_str());</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key_code<sp/>==<sp/>SDLK_UNKNOWN)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Error(<ref refid="d2/d0d/message_8h_1a8adfad4f54eb306fbb8aaa1b159608a5" kindref="member">MSG</ref>(<ref refid="dd/d1a/namespaceopenage_1_1log_1ab6b4b10be67af93ab6c4d5a36139736e" kindref="member">err</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>parse<sp/>key<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>event_type<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!param.empty())</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d1a/namespaceopenage_1_1log_1a0eff614e7d6e818746700ed9d29e583f" kindref="member">log::log</ref>(<ref refid="d2/d0d/message_8h_1a8adfad4f54eb306fbb8aaa1b159608a5" kindref="member">MSG</ref>(<ref refid="dd/d1a/namespaceopenage_1_1log_1a2a1b7ecac013c794375d21d5efd89f87" kindref="member">warn</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nothing<sp/>expected<sp/>after<sp/>key<sp/>name<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>event_type<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;,<sp/>but<sp/>got<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>param<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1aad63294ea2a94dc1723869be3c8d1670" kindref="member">sdl_key</ref>(key_code,<sp/>static_cast&lt;SDL_Keymod&gt;(mod));</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" refkind="member"><highlight class="normal"><ref refid="d1/d51/classopenage_1_1input_1_1_event" kindref="compound">Event</ref><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;event_str)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>check_modifiers_once();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dce/error_2error_8h_1ae20e8a0a86b80f8211fdf87477524f87" kindref="member">ENSURE</ref>(event_str.find(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>event<sp/>string<sp/>representation<sp/>must<sp/>be<sp/>one<sp/>line,<sp/>got<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>event_str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mod<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::smatch<sp/>event_elements;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::regex_match(event_str,<sp/>event_elements,<sp/>event_pattern))<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>groups_it<sp/>=<sp/>std::begin(event_elements)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_non_empty<sp/>=<sp/>std::find_if(groups_it,<sp/>std::end(event_elements),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::ssub_match<sp/>&amp;element)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element.length();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dce/error_2error_8h_1ae20e8a0a86b80f8211fdf87477524f87" kindref="member">ENSURE</ref>(first_non_empty<sp/>!=<sp/>std::end(event_elements),<sp/></highlight><highlight class="stringliteral">&quot;Nothing<sp/>captured<sp/>from<sp/>string<sp/>representation<sp/>of<sp/>event<sp/>&apos;&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>event_str<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;&apos;:<sp/>regex<sp/>pattern<sp/>is<sp/>broken.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index_first_non_empty<sp/>=<sp/>std::distance(groups_it,<sp/>first_non_empty);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index_first_non_empty<sp/>&lt;<sp/>std::distance(std::begin(modifiers),<sp/>std::end(modifiers)))</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mod<sp/>=<sp/>modifiers[index_first_non_empty];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>event_type<sp/>=<sp/>groups_it[modifiers.size()].str();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dce/error_2error_8h_1ae20e8a0a86b80f8211fdf87477524f87" kindref="member">ENSURE</ref>(!event_type.empty(),<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>group<sp/>where<sp/>key<sp/>was<sp/>expected<sp/>in<sp/>string<sp/>representation<sp/>of<sp/>event<sp/>&apos;&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>event_str<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;&apos;:<sp/>regex<sp/>pattern<sp/>is<sp/>broken.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>param<sp/>=<sp/>groups_it[modifiers.size()<sp/>+<sp/>1].str();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_event(event_type,<sp/>param,<sp/>mod);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="d0/df4/classopenage_1_1error_1_1_error" kindref="compound">Error</ref>(<ref refid="d2/d0d/message_8h_1a8adfad4f54eb306fbb8aaa1b159608a5" kindref="member">MSG</ref>(<ref refid="dd/d1a/namespaceopenage_1_1log_1ab6b4b10be67af93ab6c4d5a36139736e" kindref="member">err</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>parse<sp/>keybinding<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>event_str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="d9/def/namespaceopenage_1_1input_1_1tests" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tests<sp/>{</highlight></codeline>
<codeline lineno="112" refid="d9/def/namespaceopenage_1_1input_1_1tests_1a0291195ab14d6ffb5dcb8e894ec20972" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/def/namespaceopenage_1_1input_1_1tests_1a0291195ab14d6ffb5dcb8e894ec20972" kindref="member">parse_event_string</ref>()<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;q&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="d1/d51/classopenage_1_1input_1_1_event" kindref="compound">Event</ref>{<ref refid="d5/dc6/namespaceopenage_1_1input_1a278a7af94e412aa285e58d870c64a849a002101f8725e5c78d9f30d87f3fa4c87" kindref="member">event_class::ALPHA</ref>,<sp/>SDL_GetKeyFromName(</highlight><highlight class="stringliteral">&quot;q&quot;</highlight><highlight class="normal">),<sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a35fb62561b5dee35b84bc9a228b04ab1" kindref="member">modset_t</ref>{}}<sp/>||<sp/><ref refid="db/d56/testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;Return&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="d1/d51/classopenage_1_1input_1_1_event" kindref="compound">Event</ref>{<ref refid="d5/dc6/namespaceopenage_1_1input_1a278a7af94e412aa285e58d870c64a849a473d7f95e1409a797f859f013fbccaa2" kindref="member">event_class::NONPRINT</ref>,<sp/>SDL_GetKeyFromName(</highlight><highlight class="stringliteral">&quot;Return&quot;</highlight><highlight class="normal">),<sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a35fb62561b5dee35b84bc9a228b04ab1" kindref="member">modset_t</ref>{}}<sp/>||<sp/><ref refid="db/d56/testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;Ctrl<sp/>p&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="d1/d51/classopenage_1_1input_1_1_event" kindref="compound">Event</ref>{<ref refid="d5/dc6/namespaceopenage_1_1input_1a278a7af94e412aa285e58d870c64a849a002101f8725e5c78d9f30d87f3fa4c87" kindref="member">event_class::ALPHA</ref>,<sp/>SDL_GetKeyFromName(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal">),<sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a440ec4f21ee7c8cf0a64ecb96e4fca91" kindref="member">sdl_mod</ref>(static_cast&lt;SDL_Keymod&gt;(KMOD_CTRL))}<sp/>||<sp/><ref refid="db/d56/testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;Shift<sp/>MOUSE<sp/>1&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="d1/d51/classopenage_1_1input_1_1_event" kindref="compound">Event</ref>{<ref refid="d5/dc6/namespaceopenage_1_1input_1a278a7af94e412aa285e58d870c64a849a3421ce503e9731d435babad896b7aef8" kindref="member">event_class::MOUSE_BUTTON</ref>,<sp/>1,<sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a440ec4f21ee7c8cf0a64ecb96e4fca91" kindref="member">sdl_mod</ref>(static_cast&lt;SDL_Keymod&gt;(KMOD_SHIFT))}<sp/>||<sp/><ref refid="db/d56/testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;MOUSE_UP<sp/>1&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="d1/d51/classopenage_1_1input_1_1_event" kindref="compound">Event</ref>{<ref refid="d5/dc6/namespaceopenage_1_1input_1a278a7af94e412aa285e58d870c64a849ac80e822dfb2e91b477ea25b533fb001d" kindref="member">event_class::MOUSE_BUTTON_UP</ref>,<sp/>1,<sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a35fb62561b5dee35b84bc9a228b04ab1" kindref="member">modset_t</ref>{}}<sp/>||<sp/><ref refid="db/d56/testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;WHEEL<sp/>-1&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="d1/d51/classopenage_1_1input_1_1_event" kindref="compound">Event</ref>{<ref refid="d5/dc6/namespaceopenage_1_1input_1a278a7af94e412aa285e58d870c64a849a5f7856b6bcb3430acde17c87c700a4bc" kindref="member">event_class::MOUSE_WHEEL</ref>,<sp/>-1,<sp/><ref refid="d5/dc6/namespaceopenage_1_1input_1a35fb62561b5dee35b84bc9a228b04ab1" kindref="member">modset_t</ref>{}}<sp/>||<sp/><ref refid="db/d56/testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d56/testing_8h_1ad3ad66a2f3c40aa0744570ab803b903f" kindref="member">TESTTHROWS</ref>(<ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d56/testing_8h_1ad3ad66a2f3c40aa0744570ab803b903f" kindref="member">TESTTHROWS</ref>(<ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;WHEEL&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d56/testing_8h_1ad3ad66a2f3c40aa0744570ab803b903f" kindref="member">TESTTHROWS</ref>(<ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;MOUSE&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d56/testing_8h_1ad3ad66a2f3c40aa0744570ab803b903f" kindref="member">TESTTHROWS</ref>(<ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;MOUSE_DOWN&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d56/testing_8h_1ad3ad66a2f3c40aa0744570ab803b903f" kindref="member">TESTTHROWS</ref>(<ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;Blurb<sp/>MOUSE<sp/>1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d56/testing_8h_1ad3ad66a2f3c40aa0744570ab803b903f" kindref="member">TESTTHROWS</ref>(<ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;Shift<sp/>MICKEY_MOUSE<sp/>1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d56/testing_8h_1ad3ad66a2f3c40aa0744570ab803b903f" kindref="member">TESTTHROWS</ref>(<ref refid="d5/dc6/namespaceopenage_1_1input_1a910f68a5c426735a2b353eefa6229348" kindref="member">text_to_event</ref>(</highlight><highlight class="stringliteral">&quot;WHEEL<sp/>TEAR_OFF&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>openage::input</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/mnt/c/Users/Jameson/Desktop/git/openage-new-doc-system/libopenage/input/text_to_event.cpp"/>
  </compounddef>
</doxygen>
